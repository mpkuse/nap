# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_daisymeld', [dirname(__file__)])
        except ImportError:
            import _daisymeld
            return _daisymeld
        if fp is not None:
            try:
                _mod = imp.load_module('_daisymeld', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _daisymeld = swig_import_helper()
    del swig_import_helper
else:
    import _daisymeld
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _daisymeld.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _daisymeld.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _daisymeld.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _daisymeld.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _daisymeld.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _daisymeld.SwigPyIterator_equal(self, x)

    def copy(self):
        return _daisymeld.SwigPyIterator_copy(self)

    def next(self):
        return _daisymeld.SwigPyIterator_next(self)

    def __next__(self):
        return _daisymeld.SwigPyIterator___next__(self)

    def previous(self):
        return _daisymeld.SwigPyIterator_previous(self)

    def advance(self, n):
        return _daisymeld.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _daisymeld.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _daisymeld.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _daisymeld.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _daisymeld.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _daisymeld.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _daisymeld.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _daisymeld.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class floatp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _daisymeld.new_floatp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _daisymeld.delete_floatp
    __del__ = lambda self: None

    def assign(self, value):
        return _daisymeld.floatp_assign(self, value)

    def value(self):
        return _daisymeld.floatp_value(self)

    def cast(self):
        return _daisymeld.floatp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _daisymeld.floatp_frompointer
    if _newclass:
        frompointer = staticmethod(_daisymeld.floatp_frompointer)
floatp_swigregister = _daisymeld.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(t):
    return _daisymeld.floatp_frompointer(t)
floatp_frompointer = _daisymeld.floatp_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _daisymeld.new_intp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _daisymeld.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _daisymeld.intp_assign(self, value)

    def value(self):
        return _daisymeld.intp_value(self)

    def cast(self):
        return _daisymeld.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _daisymeld.intp_frompointer
    if _newclass:
        frompointer = staticmethod(_daisymeld.intp_frompointer)
intp_swigregister = _daisymeld.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _daisymeld.intp_frompointer(t)
intp_frompointer = _daisymeld.intp_frompointer

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _daisymeld.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _daisymeld.IntVector___nonzero__(self)

    def __bool__(self):
        return _daisymeld.IntVector___bool__(self)

    def __len__(self):
        return _daisymeld.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _daisymeld.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _daisymeld.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _daisymeld.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _daisymeld.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _daisymeld.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _daisymeld.IntVector___setitem__(self, *args)

    def pop(self):
        return _daisymeld.IntVector_pop(self)

    def append(self, x):
        return _daisymeld.IntVector_append(self, x)

    def empty(self):
        return _daisymeld.IntVector_empty(self)

    def size(self):
        return _daisymeld.IntVector_size(self)

    def swap(self, v):
        return _daisymeld.IntVector_swap(self, v)

    def begin(self):
        return _daisymeld.IntVector_begin(self)

    def end(self):
        return _daisymeld.IntVector_end(self)

    def rbegin(self):
        return _daisymeld.IntVector_rbegin(self)

    def rend(self):
        return _daisymeld.IntVector_rend(self)

    def clear(self):
        return _daisymeld.IntVector_clear(self)

    def get_allocator(self):
        return _daisymeld.IntVector_get_allocator(self)

    def pop_back(self):
        return _daisymeld.IntVector_pop_back(self)

    def erase(self, *args):
        return _daisymeld.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _daisymeld.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _daisymeld.IntVector_push_back(self, x)

    def front(self):
        return _daisymeld.IntVector_front(self)

    def back(self):
        return _daisymeld.IntVector_back(self)

    def assign(self, n, x):
        return _daisymeld.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _daisymeld.IntVector_resize(self, *args)

    def insert(self, *args):
        return _daisymeld.IntVector_insert(self, *args)

    def reserve(self, n):
        return _daisymeld.IntVector_reserve(self, n)

    def capacity(self):
        return _daisymeld.IntVector_capacity(self)
    __swig_destroy__ = _daisymeld.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _daisymeld.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _daisymeld.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _daisymeld.FloatVector___nonzero__(self)

    def __bool__(self):
        return _daisymeld.FloatVector___bool__(self)

    def __len__(self):
        return _daisymeld.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _daisymeld.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _daisymeld.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _daisymeld.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _daisymeld.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _daisymeld.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _daisymeld.FloatVector___setitem__(self, *args)

    def pop(self):
        return _daisymeld.FloatVector_pop(self)

    def append(self, x):
        return _daisymeld.FloatVector_append(self, x)

    def empty(self):
        return _daisymeld.FloatVector_empty(self)

    def size(self):
        return _daisymeld.FloatVector_size(self)

    def swap(self, v):
        return _daisymeld.FloatVector_swap(self, v)

    def begin(self):
        return _daisymeld.FloatVector_begin(self)

    def end(self):
        return _daisymeld.FloatVector_end(self)

    def rbegin(self):
        return _daisymeld.FloatVector_rbegin(self)

    def rend(self):
        return _daisymeld.FloatVector_rend(self)

    def clear(self):
        return _daisymeld.FloatVector_clear(self)

    def get_allocator(self):
        return _daisymeld.FloatVector_get_allocator(self)

    def pop_back(self):
        return _daisymeld.FloatVector_pop_back(self)

    def erase(self, *args):
        return _daisymeld.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _daisymeld.new_FloatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _daisymeld.FloatVector_push_back(self, x)

    def front(self):
        return _daisymeld.FloatVector_front(self)

    def back(self):
        return _daisymeld.FloatVector_back(self)

    def assign(self, n, x):
        return _daisymeld.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _daisymeld.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _daisymeld.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _daisymeld.FloatVector_reserve(self, n)

    def capacity(self):
        return _daisymeld.FloatVector_capacity(self)
    __swig_destroy__ = _daisymeld.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _daisymeld.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DaisyMeld(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DaisyMeld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DaisyMeld, name)
    __repr__ = _swig_repr

    def __init__(self, h, w, verbosity):
        this = _daisymeld.new_DaisyMeld(h, w, verbosity)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _daisymeld.delete_DaisyMeld
    __del__ = lambda self: None

    def hook(self, image_data, dim):
        return _daisymeld.DaisyMeld_hook(self, image_data, dim)

    def do_daisy_computation(self, seq):
        return _daisymeld.DaisyMeld_do_daisy_computation(self, seq)

    def get_daisy_view(self):
        return _daisymeld.DaisyMeld_get_daisy_view(self)

    def rms(self, seq):
        return _daisymeld.DaisyMeld_rms(self, seq)

    def sum2d(self, seq):
        return _daisymeld.DaisyMeld_sum2d(self, seq)

    def im_neg(self, im, d1, d2):
        return _daisymeld.DaisyMeld_im_neg(self, im, d1, d2)

    def dot(self, len1, len2):
        return _daisymeld.DaisyMeld_dot(self, len1, len2)
DaisyMeld_swigregister = _daisymeld.DaisyMeld_swigregister
DaisyMeld_swigregister(DaisyMeld)

# This file is compatible with both classic and new-style classes.


